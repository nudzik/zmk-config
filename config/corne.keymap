/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define RSE 1
#define LWR 2
#define ADJ 3

// #define AS(keycode) &as LS(keycode) keycode

/ {
    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            bindings = <&shifted>, <&kp>;

            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Z  |  U   |  I  |  O  |  P  | BKSP |
            // | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | CTRL |  Y  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &as Q  &as W  &as E     &as R  &as T        &as Z    &as U  &as I      &as O    &as P     &kp BSPC
&kp LSHFT  &as A  &as S  &as D     &as F  &as G        &as H    &as J  &as K      &as L    &as SEMI  &as SQT
&kp LCTRL  &as Y  &as X  &as C     &as V  &as B        &as N    &as M  &as COMMA  &as DOT  &as FSLH  &kp RET
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | UP |  DWN | RGT |     |      |
            // | CTRL |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB         &as N1  &as N2  &as N3    &as N4  &as N5       &as N6    &as N7   &as N8    &as N9     &as N0  &kp BSPC
&kp LEFT_SHIFT  &kp F1  &kp F2  &kp F3    &kp F4  &kp F5       &kp LEFT  &kp UP   &kp DOWN  &kp RIGHT  &trans  &kp PRINTSCREEN
&kp LCTRL       &kp F6  &kp F7  &kp F8    &kp F9  &kp F10      &kp F11   &kp F12  &trans    &trans     &trans  &kp DEL
                                &kp LGUI  &trans  &kp SPACE    &kp RET   &trans   &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | SHFT |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | CTRL |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL           &kp AT           &kp HASH    &kp DLLR  &kp PRCNT        &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LSHFT  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &kp HOME  &kp PAGE_UP      &as MINUS  &as EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LCTRL  &trans             &trans           &trans      &kp END   &kp PAGE_DOWN    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                               &kp LGUI    &trans    &kp SPACE        &kp RET    &trans     &kp RALT
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // |  Boot |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | SHFT |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | CTRL |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&bootloader  &sys_reset    &trans        &trans        &trans        &to 4           &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LCTRL    &out OUT_USB  &out OUT_BLE  &trans        &trans        &trans          &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                         &kp LGUI      &trans        &kp SPACE       &kp RET    &trans     &kp RALT
            >;
        };

        game {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Z    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LSHFT  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Y  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RET
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_Pipe {
            bindings = <&kp PIPE>;
            key-positions = <33 34>;
        };

        a_left {
            bindings = <&kp LEFT>;
            key-positions = <22 21>;
        };

        a_right {
            bindings = <&kp RIGHT>;
            key-positions = <22 23>;
        };

        a_up {
            bindings = <&kp UP_ARROW>;
            key-positions = <10 22>;
        };

        a_down {
            bindings = <&kp DOWN>;
            key-positions = <22 34>;
        };

        a_alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <25 26>;
        };

        a_lbrc {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <19 20>;
        };

        a_rbrc {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <20 21>;
        };

        a_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <29 28 27>;
            require-prior-idle-ms = <125>;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
